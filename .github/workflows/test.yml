name: Pipeline

on:
  workflow_dispatch:
    inputs:
      log_errors:
        description: "Generera error log om tester misslyckas (True eller False)"
        required: true
        default: "True"

jobs:
  start:
    runs-on: ubuntu-latest
    steps:
      - name: Initial job
        run: echo "Starting deploy workflow."

  test:
    runs-on: ubuntu-latest
    needs: start
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        id: run_tests
        run: |
          python -m unittest app.py > test_output.txt 2>&1
          if grep -q "FAILED" test_output.txt; then
            echo "Tests failed."
            echo "test_result=failed" >> $GITHUB_ENV
          else
            echo "Tests passed."
            echo "test_result=passed" >> $GITHUB_ENV
          fi

      - name: Handle logs if tests fail and logging is enabled
        if: env.test_result == 'failed' && inputs.log_errors == 'True'
        run: |
          echo "Generating error log artifact..."
          cp test_output.txt error_log.txt

      - name: Upload error log artifact
        if: inputs.log_errors == 'True' && env.test_result == 'failed'
        uses: actions/upload-artifact@v3
        with:
          name: error_log
          path: error_log.txt

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Build Docker Image
        run: |
          docker build -t gabrielheido/gabriel:latest .

      - name: Save Docker Image as TAR file
        run: |
          docker save gabrielheido/gabriel:latest -o yourimage.tar

      - name: Save Docker Image as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: ./yourimage.tar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: ./

      - name: Load Docker Image from TAR file
        run: |
          docker load -i yourimage.tar

      - name: Log into DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_GABRIEL_USERNAME }}
          password: ${{ secrets.DOCKER_GABRIEL_PASSWORD }}

      - name: Build Docker image
        run: docker build . -t gabrielheido/gabriel:weather_app

      - name: Push Docker image
        run: docker push gabrielheido/gabriel:weather_app

      - name: Push Docker Image to DockerHub
        run: |
          docker push gabrielheido/gabriel:latest

  external_api_call:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Call External API for Weather Data
        run: |
          curl -X GET "https://api.weatherapi.com/v1/current.json?key=${{ secrets.WEATHER_API_KEY }}&q=London"

  azure_deploy:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Log into Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Docker Image to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_APP_NAME }}
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
          image: gabrielheido/gabriel:latest
